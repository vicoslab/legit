
CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

IF(CMAKE_COMPILER_IS_GNUCC)
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
ENDIF()
IF(CMAKE_COMPILER_IS_GNUCXX)
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF()

IF(WIN32)
	ADD_DEFINITIONS(-DPLATFORM_WINDOWS)
	FIND_PACKAGE(OpenCV REQUIRED core imgproc video highgui)
    IF(CMAKE_COMPILER_IS_GNUCXX)
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
    ENDIF()
ELSEIF(APPLE)  
	ADD_DEFINITIONS(-DPLATFORM_OSX)
	FIND_PACKAGE(OpenCV REQUIRED core imgproc video highgui)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSEIF(UNIX)
	# TODO: Probably some distribution of Linux, but could be improved
	ADD_DEFINITIONS(-DPLATFORM_LINUX)
	FIND_PACKAGE(OpenCV REQUIRED core imgproc video highgui)
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
ELSE()
	MESSAGE(FATAL_ERROR "Unrecognized platform")
ENDIF()

SET(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} -ffast-math -O3") 
SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -ffast-math -O3")

LINK_LIBRARIES(${OpenCV_LIBS})
INCLUDE_DIRECTORIES(AFTER ${CMAKE_CURRENT_BINARY_DIR} ${OpenCV_INCLUDE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/src)
